let mapleader = ","

"Plugin Manager
filetype off
set nocompatible

call plug#begin('~/.vim/plugged')

Plug 'vimwiki/vimwiki'
Plug 'arcticicestudio/nord-vim'
Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-fugitive'
Plug 'sirver/ultisnips'
Plug 'preservim/nerdtree'
"Plug 'ryanoasis/vim-devicons'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
Plug 'tikhomirov/vim-glsl'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'tpope/vim-commentary'
Plug 'airblade/vim-gitgutter'
Plug 'mhinz/vim-startify'
Plug 'majutsushi/tagbar'

call plug#end()    

"### Plugins ###

"UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"NERDTree
map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeShowHidden=1

"VimWiki
"syntax on
let g:vimwiki_list = [{'path': '~/Personal/Notes', 'index': 'Home', 'syntax': 'markdown', 'ext': '.wiki'}] 
"let g:vimwiki_folding = 'list'

"Startify
let g:startify_session_dir = '~/.vim/session'
let g:startify_commands = [ ['VimWiki', 'VimwikiIndex'] ]
let g:startify_padding_left = 30

"Airline
let g:airline_powerline_fonts = 1

"Markdown Preview
"Make it available for all formats
let g:mkdp_command_for_global = 1
nmap <leader>md :MarkdownPreview<CR>

"if !exists('g:airline_symbols')
"  let g:airline_symbols = {}
"endif


"Syntastic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 0

"### Editor ###

"Indentation
set autoindent
set expandtab
filetype plugin indent on
set shiftround
set shiftwidth=4
set smarttab
set tabstop=4
set softtabstop=4	"number of spaces while editing

"Text Rendering
set display+=lastline
set encoding=UTF-8
set linebreak
set wrap
syntax enable		"enable syntax 

"Search
set incsearch		"search as characters are entered
set hlsearch		"highlight matches
set ignorecase
set smartcase
set showmatch		"highlight matching parentheses

"Performance
set lazyredraw		"redraw only when needed

"UI
set ruler
set wildmenu		"visual autocomplete for command menu
set cursorline		"highlight current line
set nu		        "show line numbers
set rnu
set title
set showcmd		    "show commands in bot line

"Folding
set foldmethod=indent	"fold based on indent level
set foldnestmax=5	"10 nested fold max
set foldenable		"enable folding
set foldlevelstart=5	"open most folds by default
nnoremap  <space> za	


"Misc
set hidden " Enables hidden buffers, so you can have modified buffers in the background
set autoread
set backspace=indent,eol,start
set history=1000
set omnifunc=syntaxcomplete#Complete
set clipboard=unnamed "system clipboard

"Mappings
nmap <C-p> :Files<CR>
nmap <C-b> :Buffers<CR>
nmap <leader>. :Tags<CR>
nmap <leader>, :w<CR>
nnoremap <C-g> :Rg 

" Copy to clipboard
nmap <C-c> "*y
vmap <C-c> "*y

set pastetoggle=<leader>p

"Windows
"nmap <C-h> <C-w>h
"nmap <C-j> <C-w>j
"nmap <C-k> <C-w>k
"nmap <C-l> <C-w>l

tnoremap <C-h> <C-\><C-N><C-w>h
tnoremap <C-j> <C-\><C-N><C-w>j
tnoremap <C-k> <C-\><C-N><C-w>k
tnoremap <C-l> <C-\><C-N><C-w>l
inoremap <C-h> <C-\><C-N><C-w>h
inoremap <C-j> <C-\><C-N><C-w>j
inoremap <C-k> <C-\><C-N><C-w>k
inoremap <C-l> <C-\><C-N><C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
"Colors
set t_Co=256
"set termguicolors   "enable true color
colorscheme nord	"colors
"let g:gruvbox_italic=1
let g:nord_bold=1
let g:nord_italic=1
let g:nord_underline=1
let g:nord_italic_comments=1
"let g:nord_cursor_line_number_background=1
"
"
"
"

"Fordprog
autocmd BufNewFile,BufRead *.ih set syntax=cpp

" Toggle 'default' terminal
nnoremap <C-\> :call ChooseTerm("term-slider", 1)<CR>
" Start terminal in current pane
nnoremap <C-'> :call ChooseTerm("term-pane", 0)<CR>
	
function! ChooseTerm(termname, slider)
	let pane = bufwinnr(a:termname)
	let buf = bufexists(a:termname)
	if pane > 0
		" pane is visible
		if a:slider > 0
			:exe pane . "wincmd c"
		else
			:exe "e #"
		endif
	elseif buf > 0
		" buffer is not in pane
		if a:slider
			:exe "botright split"
		endif
		:exe "buffer " . a:termname
	else
		" buffer is not loaded, create
		if a:slider
			:exe "botright split"
		endif
		:terminal
		:exe "f " a:termname
	endif
endfunction
